一、基本用法
	(1)、快速搭建一个 spa 应用
		1，老版本推荐
			npm install create-react-app -g
			create-react-app demo-name
			cd demo-name
			npm start
		2，新版本推荐（node >= 8.10 和 npm >= 5.6，npx 是 npm 5.2+ 附带的 package 运行工具）
			npx create-react-app demo-name
			cd demo-name
			npm start
	(2)、语法特别之处
		1，使用 JSX（一个 JavaScript 的语法扩展，html 和 JavaScript 的混写模式）
		2，使用 es6语法，如 class、import、export、对象的解构赋值
		3，每个组件都是一个 js 文件，包含 html部分和 JavaScript部分。样式照旧放在 css 文件中。
				使用组件以单标签的样式即可，如使用 timer 组件：<Timer />，组件名称必须以大写字母开头。
		4，取值
			4.1、普通取值使用 {}。state 属于组件内部的私有属性，完全受控于当前组件
			4.2、img 标签的src取值
				对于本地资源：
					①、使用 import 引入某个图片，如
						import logo from './logo.png';
						<img src={logo} />
					②、使用 require 引入
						<img src={require('./logo.png')} />
				对于线上资源：
					直接将地址作为 src 属性的值
					<img src="https://www.baidu.com/img/bd_logo1.png" alt=""/>
			4.3、label 标签的 for 属性在写法上，需要以 htmlFor 代替
			4.4、class 属性使用 className 代替
			注：JSX 语法上更接近 JavaScript，故 React DOM 使用 camelCase（小驼峰命名）定义属性的名称，如 class --> className
			4.5、列表的渲染
				在 React 中，渲染一个对象数组时，要注意取值不能为单个对象，必须为对象下某个非对象的字段（否则报错，都还找不到原因的那种。。。）。
				{
					this.state.list.map((value, key) => <li key={key}> {value.title} </li>)
				}
				
		5，表单（因为表单元素通常会保持一些内部的 state，故在 React 中，表单元素的工作方式和其他的 DOM 元素有些不同）
			react 没有封装类似于 v-model 的语法糖来实现数据的双向绑定，但在根本上原理一致。通过将组件内部的某个值赋值给 input的 value 属性，并监听 onChange 事件，在其改变时相应的更改组件内部该值（使用 setState()）。
	(3)、React 元素
		与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象。React DOM 负责更新 DOM 来与 React 元素保持一致。
		<div id="root"></div>  “根” DOM 节点，该节点内的所有内容都将由 React DOM 管理
	(4)、事件的 this 指向问题
		1，在 render 函数中，JSX 写法取值使用 this.state.xx、this.xxthing
		2，在 function 中使用 state 中的值，需要用 this.state.xx，但是由于 this 指向的问题，会报错。
			2.1、处理方法：
			①、在调用该 function 的地方使用 bind，如： <div onClick="{this.xxthing.bind(this)}"></div>
			②、在 constructor 中重新绑定 this，如： this.xxthing = this.xxthing.bind(this);
			③、在定义该 function 时，使用箭头函数。
				注：箭头函数体内的 this 对象，就是定义时所在的对象（指向固定），而不是使用时所在的对象
						bind 底层使用 Function.prototype.bind 实现
			2.2、调用函数时传值要使用 .bind(this, params1)，此时 React 的事件对象 event 默认作为第二个参数传递
	(5)、父子组件传值
		* 父组件 --> 子组件：父组件调用子组件时，以属性的方式传递；在子组件中，通过 props 获取（可获取父组件的 属性值、方法、整个组件）
		* 子组件 --> 父组件：父组件调用时 以属性传递的方式调用本组件内部 smFuc 方法，在子组件中，通过调用本组件内部某方法，将要传递的值 通过 this.props.smFuc(value) 传递至父组件（可传递 属性值、整个子组件）
		注：封装的组件可设置 props 的默认值、类型
			import PropTypes from 'prop-types';
			smCom.propTypes = { smprops: PropTypes.type }
			smCom.defaultProps = {smprops: xxDefaultValue}
	(6)、React组件
		自定义的组件以大写字母开头，且只能包含一个顶层标签。
		定义组件的方式：函数/ES6 class